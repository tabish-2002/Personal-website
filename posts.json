[
  {
    "title": "How I Implemented Light/Dark Mode",
    "date": "2025-08-03",
    "content": "To implement the light/dark mode functionality across my website, I began by adding a toggle button labeled 'Switch to Dark Mode' in the navigation section. I then created a JavaScript function that listens for a click on this button. When clicked, it toggles a 'dark-mode' class on the <body> element.\n\nIn my CSS file, I used CSS custom properties (variables) to define the color scheme. The default light mode variables define white backgrounds and dark text, while the .dark-mode class overrides those variables with dark backgrounds and light text. This approach ensures that theme switching happens smoothly across all pages.\n\nAfter building the toggle logic, I also updated the button's label dynamically so that it reflects the current mode â€” for example, it changes to 'Switch to Light Mode' when dark mode is active. Finally, I made sure this script executes after the navigation is loaded dynamically, since the toggle button is injected through the header.html file.\n\nThis feature allows users to easily switch between themes for a more comfortable viewing experience, especially in different lighting environments."
  },
  {
    "title": "Building a Dynamic Blog with JavaScript",
    "date": "2025-08-04",
    "content": "For the blog section of my website, I wanted to load and display posts dynamically using JavaScript and a JSON file. I started by creating a dedicated HTML page called 'blog.html' with a main section containing an empty <div> element with the ID 'blog-list'. This is where the posts would be inserted.\n\nNext, I created a file named 'posts.json', where I stored all my blog post data as an array of objects. Each object includes the blog post's title, date, and content. This format makes it easy to manage or add new blog posts without changing the HTML structure manually.\n\nI then wrote a JavaScript script using the fetch API to retrieve the contents of posts.json. Once fetched, I loop through each post using forEach and dynamically create HTML elements for the title, date, and content of each post. I wrapped each post in a styled <article> element and appended them to the 'blog-list' container.\n\nTo keep the design consistent, I also applied custom styling via CSS to ensure the blog page matches the rest of the site. This includes spacing, font styles, and responsive behavior.\n\nOverall, this approach makes the blog fully data-driven, so I can add, edit, or remove posts simply by updating the JSON file, without touching the HTML."
  }
]
